/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <cstdlib>
#include <algorithm>

using namespace std;

//Classe usada para armazenar a ultima jogada (linha e coluna) e o valor da função de utilidade
//para o tabuleiro nesse estado
class Posicao{
  public:
    int linha;
    int coluna;
    int util;
    
    Posicao(){}
    
    Posicao(int x, int y){
        linha = x;
        coluna = y;
        util = 0;
    }
    
    Posicao(int x, int y, int z){
        linha = x;
        coluna = y;
        util = z;
    }
};

void Desenha(int tabuleiro[][3]);

//Função de utilidade para associar um valor para cada estado do tabuleiro.
//A função utilizada calcula o número de possibilidades de X ou O ganhar e retorna a subtração
//dessas duas possibilidades (x - o).
//Quando um jogador completa 3 jogadas em uma linha, coluna ou diagonal, a função conta pontos extras
//para esse jogador.
int FuncaoUtil(int tabuleiro[][3]){
    
    //Variáveis que guardam as possibilidades de cada jogador ganhar
    int x = 0;
    int o = 0;
    
    //Contadores das jogadas de X e O.
    int xCont = 0;
    int oCont = 0;
    
    //Verificar linhas do tabuleiro
    for(int i = 0; i < 3; i++){
        
        xCont = oCont = 0;
        for(int j = 0; j < 3; j++){
            
            if(tabuleiro[i][j] == 1)
                xCont++;
            else if(tabuleiro[i][j] == 2)
                oCont++;
            
        }
        
        if(xCont > oCont && !oCont){
            x++;
            
            if(xCont > 2)
                x+=10;
        }
        else if(xCont < oCont && !xCont){
            o++;
            
            if(oCont > 2)
                o+=15;
        }
    }
    
    //Verificar colunas do tabuleiro
    for(int j = 0; j < 3; j++){
        
        xCont = oCont = 0;
        for(int i = 0; i < 3; i++){
            
            
            if(tabuleiro[i][j] == 1)
                xCont++;
            else if(tabuleiro[i][j] == 2)
                oCont++;
            
        }
        
        if(xCont > oCont && !oCont){
            x++;
            
            if(xCont > 2)
                x+=10;
        }
        else if(xCont < oCont && !xCont){
            o++;
            
            if(oCont > 2)
                o+=15;
        }
    }
    
    //Verificar a diagonal 1 do tabuleiro
    xCont = oCont = 0;
    for(int i = 0; i < 3; i++){
        
        if(tabuleiro[i][i] == 1)
            xCont++;
        else if(tabuleiro[i][i] == 2)
            oCont++;
    }
    
    if(xCont > oCont && !oCont){
        x++;
        
        if(xCont > 2)
            x+=10;
    }
    else if(xCont < oCont && !xCont){
        o++;
        
        if(oCont > 2)
            o+=15;
    }
    
    //Verificar a diagonal 2 do tabuleiro
    xCont = oCont = 0;
    for(int i = 0; i < 3; i++){
        
        if(tabuleiro[2-i][i] == 1)
            xCont++;
        else if(tabuleiro[2-i][i] == 2)
            oCont++;
    }
    
    if(xCont > oCont && !oCont){
        x++;
        
        if(xCont > 2)
            x+=10;
    }
    else if(xCont < oCont && !xCont){
        o++;
        
        if(oCont > 2)
            o+=15;
    }
    
    return x - o;
    
}

//Função para verificar se o jogo terminou.
//Linhas, colunas e diagonais são verificadas para identificar um ganhador ou se o jogo
//possuí espaços vazios.
int Ganhou(int tabuleiro[][3]){
    int vazioCont = 0;
    
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
            if(tabuleiro[i][j] == 0){
                vazioCont++;
            }
        }
    }
    
    //Verificar linhas do tabuleiro
    for(int i = 0; i < 3; i++){
        if(tabuleiro[i][0] == 1 && tabuleiro[i][1] == 1 && tabuleiro[i][2] == 1)
            return 1;
        else if(tabuleiro[i][0] == 2 && tabuleiro[i][1] == 2 && tabuleiro[i][2] == 2)
            return 2;
    }
    
    //Verificar colunas do tabuleiro
    for(int i = 0; i < 3; i++){
        if(tabuleiro[0][i] == 1 && tabuleiro[1][i] == 1 && tabuleiro[2][i] == 1)
            return 1;
        else if(tabuleiro[0][i] == 2 && tabuleiro[1][i] == 2 && tabuleiro[2][i] == 2)
            return 2;
    }
    
    //Verificar diagonal 1 do tabuleiro
    if(tabuleiro[0][0] == 1 && tabuleiro[1][1] == 1 && tabuleiro[2][2] == 1)
        return 1;
    else if(tabuleiro[0][0] == 2 && tabuleiro[1][1] == 2 && tabuleiro[2][2] == 2)
        return 2;
        
    //Verificar diagonal 2 do tabuleiro
    if(tabuleiro[2][0] == 1 && tabuleiro[1][1] == 1 && tabuleiro[0][2] == 1)
        return 1;
    else if(tabuleiro[2][0] == 2 && tabuleiro[1][1] == 2 && tabuleiro[0][2] == 2)
        return 2;
        
    if(vazioCont)
        return 0;
    
    return 3;
}

//Função para interagir com o jogador. Caso o jogador escolha uma posição não vazia, a função
//é chamada novamente.
void Jogador(int tabuleiro[][3]){
    cout << "Digite a posiçao do X (linha coluna)\n";
    cout << "Numeros aceitos: 0, 1 e 2\n";
    
    int linha;
    int coluna;
    cin >> linha >> coluna;
    
    cout << "\n";
    
    if(linha >= 0 && linha <= 2 && coluna >= 0 && coluna <= 2){
        if(tabuleiro[linha][coluna] == 0)
            tabuleiro[linha][coluna] = 1;
        else{
            cout << "Posição já ocupada.\n";
            Jogador(tabuleiro);
        }    
    }
    else{
        cout << "Valores para linha e coluna inválidos.\n";
        Jogador(tabuleiro);
    }
    
}

//Função para maximizar a jogada do jogador. A verificação ocorre após a jogada da máquina
//para definir a melhor jogada para ela.
Posicao MaxFunc(int tabuleiro[][3]){
    
    Posicao final(0, 0);
    final.util = -100;
    
    
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
            
            if(tabuleiro[i][j] == 0){
                
                tabuleiro[i][j] = 1;
                
                Posicao aux(i, j, FuncaoUtil(tabuleiro));
                
                if(aux.util > final.util)
                    final = aux;
                
                tabuleiro[i][j] = 0;
                
            }
        }
    }
    
    return final;
    
}

//Função para minimizar a jogada do computador. Pela função de utilidade, minimizar a função
//significa obter o melhor resultado para a máquina
Posicao MinFunc(int tabuleiro[][3]){
    
    Posicao final(0, 0, 100);
    
    
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
            
            if(tabuleiro[i][j] == 0){
                
                tabuleiro[i][j] = 2;
                
                Posicao sucessor = MaxFunc(tabuleiro);
                
                if(sucessor.util < final.util){
                    
                    final = sucessor;
                    final.linha = i;
                    final.coluna = j;
                    
                }
                
                tabuleiro[i][j] = 0;
            }
        }
    }
    
    return final;
    
}

//Função que realiza a jogada do computador.
void Oponente(int tabuleiro[][3]){
    
    //Avaliar todas as possibilidades de jogadas.
    int linha;
    int coluna;
    
    Posicao j = MinFunc(tabuleiro);
    
    tabuleiro[j.linha][j.coluna] = 2;
    
}

//Função para desenhar o estado atual do tabuleiro.
void Desenha(int tabuleiro[][3]){
    
    char simbolo[3]={' ', 'x', 'o'};
    cout << "\n";
    cout<<simbolo[tabuleiro[0][0]]<<" | "<<simbolo[tabuleiro[0][1]]<<" | "<<simbolo[tabuleiro[0][2]]<<"\n";
    cout<<simbolo[tabuleiro[1][0]]<<" | "<<simbolo[tabuleiro[1][1]]<<" | "<<simbolo[tabuleiro[1][2]]<<"\n";
    cout<<simbolo[tabuleiro[2][0]]<<" | "<<simbolo[tabuleiro[2][1]]<<" | "<<simbolo[tabuleiro[2][2]]<<"\n";
}

//Função principal do Jogo da Velha. O algoritmo MinMax foi implementado na jogada do computador,
//baseado na jogada seguinte do jogador (1 camada de MinMax).
int main()
{
    //Vetor para definir a mensagem no fim do jogo.
    string ganhador[4] = {" ", "Jogador ganhou!", "Computador ganhou.", "Empate."};
    
    //Tabuleiro do jogo.
    int tabuleiro[3][3];
    
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
            tabuleiro[i][j] = 0;
        }
    }
    
    //Enquanto não existir ganhador ou jogdadas possíveis, o jogo continua.
    //O jogador sempre inicia o jogo, seguido da jogada do computador.
    while(!Ganhou(tabuleiro)){
        
        Desenha(tabuleiro);
        Jogador(tabuleiro);
        if(!Ganhou(tabuleiro))
            Oponente(tabuleiro);
    }
    
    Desenha(tabuleiro);
    
    cout<<"Fim do jogo! "<<ganhador[Ganhou(tabuleiro)]<<endl;
    

    return 0;
}

